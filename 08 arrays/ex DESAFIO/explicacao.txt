★ Qual a estrutura da função sort?

>>> Aqui tá errado
○ Quais parâmetros pode receber?
_Pode receber dois parâmetros que vai usar pra comparar.

○ A função tem algum valor de retorno ou não?
_Sim, a função retorna o array original modificado.

○ A função modifica o array passado ou cria um novo array ordenado? 
_A função modifica o array passado. 


>>> Não explicou como a função funciona, só descreve como podemos chamá-la no código!
Como é feita a comparação??

★ Como a função sort funciona para strings e números?
_Para strings, basta escrever o nome do array e em seguida aplicar a função sort.
Exemplo:
const fruits = ["Banana", "Orange", "Apple", "Mango"]
fruits.sort() // saída: ["Apple", "Banana", "Mango", "Orange"]

_Para números, é preciso usar a comparação descrita na última resposta.
Exemplo:
const points = [40, 100, 1, 5, 25, 10]
points.sort(function(a, b){return a-b}) // saída: [ 1, 5, 10, 25, 40, 100 ]
A função compara todos os elementos e os retorna ordenados.


>>> Aqui não está claro como a comparação é feita e como se obtém os valores negativo, positivo e zero!

★ Explicar como resolveu o desafio passo a passo.
_Pesquisei a função sort. Essa função usa dois parâmetros: a e b e os compara 
com operadores relacionais ou com operador aritimético de subtração.
Se resulta um valor negativo ou é menor, o parâmetro 'a' vem primeiro.
Se resulta valor positivo ou é maior, o parâmetro 'b' vem primeiro.
Se resulta zero ou NaN, a e b são iguais.
O array é ordenado 'por debaixo dos panos' percorrendo todos os elementos dos objetos
criando a ordenação comparando valores de dois em dois.

Usei a condicional IF para saber qual critério está sendo utilizado.
Depois, apliquei a função sort no parâmetro array.
Esse bloco se repete 4 vezes, uma para cada propriedade dos objetos: nome, preço, categoria e popularidade.

O parâmetro criterio é usado entre colchetes após o parâmtro 'a' e o 'b' 
para conseguir pegar todas as propriedades dos objetos.

        function ordenarProdutos(array, criterio){
            if (criterio === 'nome'){
                array.sort(
                    function(a,b){
                            if(a[criterio] < b[criterio]) {
                                return -1
                            } else if(a[criterio] > b[criterio]) {
                                return 1
                            } else {
                                return 0
                            }
                        }
                )
            }
        (...)}

No final, o seguinte bloco se repete para cada propriedade dos objetos:
Criei uma cópia do array para não modificar o original em uma nova varável 'produtosOrdenados' 
declarada como let.

>>>(POR QUAL RAZÃO DECLAROU COMO LET? QUAL MOTIVO?)


Apliquei a função colocando essa variável e o criterio nos parâmetros.
Imprimi.

        let produtosOrdenadosNome = [...produtos]
        ordenarProdutos(produtosOrdenadosNome, 'nome')
        console.log('Produtos ordenados por NOME: ', produtosOrdenadosNome)

Depois foi possível desenvolver uma função muito menor com sugestões do Chat GPT.
A solução abaixo não foi simplesmente copiada. 

function ordenarProdutos(array, criterio){
    return [...array].sort((a,b) => {
            if (a[criterio] < b[criterio]) return -1
            if (a[criterio] > b[criterio]) return 1
            return 0
        }
    )
}

A nova solução já começa criando a cópia automaticamente sem precisar fazer em cada um dos 4 blocos finais.
A arrow function é usada, também economizando espaço. A condicional IF é usada após a função sort 
para que não precise repetí-la. Não é preciso criar 4 blocos dentro da função 
porque este único bloco funciona para todas as propriedades. 

>>> Qual o é o problema de letras maiusculas e por que ele acontece??
Ainda é preciso tratar o problema das letras maúsculas.